import{aC as $,iH as G,iI as O,G as C,e$ as P,iJ as q,iK as E,iL as H,eR as J,iM as A,a8 as B,bu as K}from"./index-r0Ml_rWi.js";async function M(t,d,l,p,o){const{elevationProvider:f,renderCoordsHelper:r}=t,{elevationInfo:u}=d,{pointsInFeatures:m,spatialReference:g}=p,h=$.fromJSON(g),y=G(u,!0),I=await O(y,h,o);C(o);const c=[],e=new Set,s=new Set,a=new J,n=P(0,0,0,$.WGS84),i=new A,S=B();n.spatialReference=h;const D=t.elevationProvider.spatialReference??t.spatialReference;for(const{objectId:R,points:v}of m){const b=l(R);if(b==null){for(const w of v)c.push(w.z??0);e.add(R);continue}b.isDraped&&s.add(R);const j=b.graphic.geometry;a.setFromElevationInfo(q(j,u)),a.updateFeatureExpressionInfoContext(I,b.graphic,d);for(const{x:w,y:z,z:F}of v)n.x=w,n.y=z,n.z=F??0,await E(n,S,D,0,{signal:o}),H(S,f,a,r,i),c.push(i.z)}return{elevations:c,drapedObjectIds:s,failedObjectIds:e}}async function N(t,d,l){if(t==null||d.candidates.length===0)return x;const p=t.graphics3DGraphicsByObjectID??t.graphics3DGraphics,o=[],f=[],{renderer:r}=t,u=r!=null&&"arcadeRequired"in r&&r.arcadeRequired?K():null,m=async(e,{graphic:s,graphics3DSymbol:a})=>{const n=await u,i=await t.getRenderingInfoAsync(s,r,n,{signal:l});return i==null?[]:a.queryForSnapping(e,h,i,l)},{candidates:g,spatialReference:h}=d;for(let e=0;e<g.length;++e){const s=g[e],{objectId:a}=s,n=typeof a=="number"?p==null?void 0:p.get(a):void 0;if(n==null)continue;const{graphics3DSymbol:i}=n;i.symbologySnappingSupported&&(o.push(m(s,n)),f.push(e))}if(o.length===0)return x;const y=await Promise.all(o);C(l);const I=[],c=[];for(let e=0;e<y.length;++e){const s=y[e],a=f[e];for(const n of s)I.push(n),c.push(a)}return{candidates:I,sourceCandidateIndices:c}}const x={candidates:[],sourceCandidateIndices:[]};export{M as m,N as r};
